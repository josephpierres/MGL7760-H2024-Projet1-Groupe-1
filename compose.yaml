services:
    # serveur de base de donnees Mysql
  mysql:
    image: mysql:8.0.22   
    container_name: mysql
    command: --default-authentication-plugin=mysql_native_password    
    restart: always   
    ports:
      - '3306:3306'
    expose:
      - 3306
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: gestion_bibliotheque
      MYSQL_USER: myuser
      MYSQL_PASSWORD: mypassword
    volumes:
      - ./mysql/db.sql/:/docker-entrypoint-initdb.d/db.sql
      - ./mysql/app:/app/             # pour le fichier de configuration
      - ./mysql/data:/var/lib/mysql   # les donnees que mysql generent
    #command: ['mysqld', '--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci']
  
    healthcheck:
      #test: ["CMD", "mysql", "-h", "localhost", "-u", "root", "-ppassword", "-e", "SELECT 1"]
      test: mysqladmin ping -h 127.0.0.1 -u root --password=$$MYSQL_ROOT_PASSWORD
      start_period: 5s
      interval: 5s
      timeout: 20s
      retries: 10
    networks:
      - back_network 
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: mysql
    # serveur de cache Regis
  redis:
    container_name: redis
    image: redis:7.2.4    
    ports:
      - '6378:6379'
    volumes:
      - ./redis/data:/data
    networks:
      - back_network
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: redis
    # Flask sur python avec WSGI - l app serveur
  
  wsgi:
    build:
      context: ./myapp      
      dockerfile: dockerfile
      args:
        buildno: 1  
    image: wsgi:1.0  
    container_name: wsgi
    hostname: wsgi
    restart: always
    volumes:
      - ./myapp:/app
    working_dir: /app  
    environment:
      - MYSQL_PORT = 3306
      - FLASK_ENV = production
      - APP_NAME = Bibliotheque 
      - MYSQL_HOST = mysql
      - REDIS_HOST = redis
      - REDIS_PORT = 6379
      - DATABASE_URL=mysql://pharma_user:pharma_password@mysql/pharmacy_management
      - REDIS_URL=redis://redis:6379/0
      - FLUENTD_HOST=fluentd     
    expose: [8081]
      # command: sh -c "python3 manage.py"      
    depends_on:      
    - redis
    - fluentd
    - mysql
    #  condition: service_healthy       
    
    networks:
      - front_network
      - back_network
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: biblio_app

    # le repatiteur de charge et serveur web - Nginx  
  nginx:
    image: nginx:latest
    container_name: nginx  
    restart: always
    volumes: 
      - './nginx/configs/:/etc/nginx/conf.d/'
      - './nginx/www:/var/www/html'    # si toutefois j'ai des statics files
      - './nginx/log:/var/log/nginx/'
    ports:
      - '8000:80' # nginx utilise le port 80
    depends_on:
     - wsgi      
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: nginx
    networks:
      - front_network
            
  fluentd:
    image: fluent/fluentd:v1.11
    container_name: fluentd
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    volumes:
      - ./fluentd/configs/fluent.conf:/fluentd/etc/fluent.conf
    command: '-c /fluentd/etc/fluentd.conf -v'
    environment:
      LOKI_URL: http://loki:3100
      LOKI_USERNAME:
      LOKI_PASSWORD:
    deploy:
      mode: global
    configs:
      - source: loki_config
        target: /fluentd/etc/loki/loki.conf
    networks:
      - front_network
      - back_network

  loki:
    image: grafana/loki:2.8.3
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    environment:
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
    logging:
      driver: loki
      options:
        loki-url: 'http://localhost:3100/api/prom/push'


  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    environment:
      JAEGER_AGENT_HOST: jaeger
    ports:
      - 5775:5775/udp 
      - 6831:6831/udp 
      - 6832:6832/udp 
      - 5778:5778 
      - 16686:16686 
      - 14268:14268 
      - 14250:14250 
      - 9411:9411 
    networks:
      - back_network
    logging:
      driver: loki
      options:
        loki-url: 'http://localhost:3100/api/prom/push'

  otel-collector:
    image: otel/opentelemetry-collector:latest
    command: ['--config=/etc/otel-collector-config.yaml']
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    depends_on:
      - jaeger
  grafana:
    #image: grafana/grafana:10.0.3    
    build:
      context: ./grafana
    container_name: grafana
    
    restart: unless-stopped
    environment:
     - GF_SERVER_ROOT_URL=http://my.grafana.server/
     - GF_INSTALL_PLUGINS=grafana-clock-panel
     - GF_SECURITY_ADMIN_USER=admin
     - GF_SECURITY_ADMIN_PASSWORD=grafana
    entrypoint:
      - /usr/share/grafana/bin/grafana-server
      - --homepath=/usr/share/grafana
      - --config=/etc/grafana-config/grafana.ini
    volumes:
      - ./grafana/config:/etc/grafana-config
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/dashboards-provisioning:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    ports:
     - '3000:3000'
    logging:
      driver: loki
      options:
        loki-url: 'http://localhost:3100/api/prom/push'

  hotrod:
    image: jaegertracing/example-hotrod:latest
    ports:
      - '8080:8080'
      - '8083:8083'
    command: ["-m","prometheus","all"]
    environment:
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
    logging:
      driver: loki
      options:
        loki-url: 'http://localhost:3100/api/prom/push'
  # elasticsearch:
  #   profiles: [integrations,elasticsearch]
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
  #   environment:
  #     - node.name=elasticsearch
  #     - cluster.name=es-grafana-agent-cluster
  #     - discovery.type=single-node
  #   volumes:
  #     - elasticsearch_data:/usr/share/elasticsearch/data
  #   ports:
  #     - "9200:9200"
  # prometheus:
  #   image: prom/prometheus
  #   container_name: prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #   ports:
  #     - 9090:9090
  #   restart: unless-stopped
  #   volumes:
  #     - ./prometheus:/etc/prometheus
  #     - prom_data:/prometheus
  #   logging:
  #     driver: loki
  #     options:
  #       loki-url: 'http://localhost:3100/api/prom/push'
networks:
  front_network:
    name: front_network
    driver: bridge
  back_network:
    name: back_network
    driver: bridge      
   
volumes:
  mysql:
    name: mysql_volume
    driver: local 
  elasticsearch_data:
    driver: local
  prom_data:
  grafana_storage:
    external: true   


    
    
