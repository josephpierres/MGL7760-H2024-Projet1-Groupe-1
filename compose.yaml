
services:
  # Serveur de base de données MySQL
  mysql:
    image: mysql:8.0.22   
    container_name: mysql
    command: --default-authentication-plugin=mysql_native_password    
    restart: always   
    ports:
      - '3306:3306'
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: gestion_bibliotheque
      MYSQL_USER: myuser
      MYSQL_PASSWORD: mypassword
    volumes:
      - ./mysql/db.sql:/docker-entrypoint-initdb.d/db.sql
      - ./mysql/app:/app
      - ./mysql/data:/var/lib/mysql
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u root --password=$$MYSQL_ROOT_PASSWORD
      start_period: 5s
      interval: 5s
      timeout: 20s
      retries: 10
    networks:
      - biblio_net
    logging:
      driver: "json-file"  # Utiliser le driver de log par défaut

  # Serveur de cache Redis
  redis:
    container_name: redis
    image: redis:7.2.4    
    ports:
      - '6378:6379'
    volumes:
      - ./redis/data:/data
    networks:
      - biblio_net
    logging:
      driver: "json-file"  # Utiliser le driver de log par défaut

  # Application WSGI (Flask)
  wsgi:
    build:
      context: ./myapp
      dockerfile: Dockerfile
    image: wsgi:1.0
    container_name: wsgi
    restart: always
    volumes:
      - ./myapp:/app
    working_dir: /app
    environment:
      - MYSQL_PORT=3306
      - FLASK_ENV=production
      - APP_NAME=Bibliotheque
      - REDIS_URL=redis://redis:6379/0   
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_METRICS_EXPORTER=none
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otelcol:4318/
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
      - OTEL_SERVICE_NAME=backend   
    ports:
      - "5000:5000"
    expose:
      - 8080
      - 5000
    depends_on:
      - mysql
      - redis
      - otelcol
   #   - prometheus
   #  - grafana
    networks:
      - biblio_net
    logging:
      driver: "json-file"

  # Serveur Nginx
  nginx:
    build:
        context: ./nginx
        dockerfile: Dockerfile
    container_name: nginx
    # image: nginx:latest
    restart: always
    volumes: 
      - './nginx/configs/opentelemetry_module.conf:/etc/nginx/conf.d/opentelemetry_module.conf'
      - './nginx/configs/default.conf:/etc/nginx/conf.d/default.conf'
      - './nginx/www:/var/www/html'
      - './nginx/log:/var/log/nginx'
    ports:
      - '8000:80'
    depends_on:
      - wsgi
    networks:
      - biblio_net
    logging:
      driver: "json-file"

  # OpenTelemetry Collector
  otelcol:
    container_name: otelcol
    image: otel/opentelemetry-collector:latest   
    volumes:
      - ./otel-collector/configs/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
    
    ports:
      - "4317:4317"  # OTLP gRPC for traces 
      - "4318:4318" # Default endpoint for OpenTelemetry receiver.
      - "4318:4318/udp"
      - "55679:55679" # Default endpoint for ZPages.
      - "14250:14250" # Default endpoint for Jaeger gRPC receiver.
      - "14268:14268" # Default endpoint for Jaeger HTTP receiver.
      - "9411:9411"   # Default endpoint for Zipkin receiver.     
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
    networks:
      - biblio_net

  # # Serveur Grafana
  # grafana:
  #   build:
  #     context: ./grafana
  #   container_name: grafana  
  #   restart: unless-stopped
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   depends_on:
  #     - prometheus
  #   environment:
  #     GF_SECURITY_ADMIN_USER: admin
  #     GF_SECURITY_ADMIN_PASSWORD: admin
  #   networks:
  #     - biblio_net

  # # Serveur Prometheus
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   restart: always
  #   volumes:
  #     - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #   ports:
  #     - "9090:9090"
  #   networks:
  #     - biblio_net

networks:
  biblio_net:
    name: biblio_net
    driver: bridge

volumes:
  grafana_data: {}
    
