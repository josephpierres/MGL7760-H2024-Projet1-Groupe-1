
services:
    # serveur de base de donnees Mysql
  mysql:
    image: mysql:8.0.22   
    container_name: mysql
    command: --default-authentication-plugin=mysql_native_password    
    restart: always   
    ports:
      - '3306:3306'
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: gestion_bibliotheque
      MYSQL_USER: myuser
      MYSQL_PASSWORD: mypassword
      JAEGER_REPORTER_LOG_SPANS: true
      JAEGER_SAMPLER_PARAM: 1
      JAEGER_SAMPLER_TYPE: const
    volumes:
      - ./mysql/db.sql:/docker-entrypoint-initdb.d/db.sql
      - ./mysql/app:/app
      - ./mysql/data:/var/lib/mysql
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u root --password=$$MYSQL_ROOT_PASSWORD
      start_period: 5s
      interval: 5s
      timeout: 20s
      retries: 10
    networks:
      - biblio_net 
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: mysql
    depends_on:
      - fluentd

    
    # serveur de cache Regis
  redis:
    container_name: redis
    image: redis:7.2.4    
    ports:
      - '6379:6379'
    volumes:
      - ./redis/data:/data
    networks:
      - biblio_net
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: redis
    depends_on:
      - fluentd

    # Flask sur python avec WSGI - l app serveur
  
  wsgi:
    build:
      context: ./myapp
      dockerfile: Dockerfile
    image: wsgi:1.0
    container_name: wsgi
    restart: always
    volumes:
      - ./myapp:/app
    working_dir: /app
    environment:
      - MYSQL_PORT = 3306
      - FLASK_ENV = production
      - APP_NAME = Bibliotheque       
      - REDIS_URL=redis://redis:6379/0     
    expose: [8080]
      # command: sh -c "python3 manage.py"      
    depends_on:
      
      - redis
      - otel-collector
      - prometheus
      - grafana
      - fluentd
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: wsgi     
    networks:
      - biblio_net    
      
   

    # le repatiteur de charge et serveur web - Nginx  
  nginx:
    container_name: nginx
    hostname: nginx
    image: nginx:latest
    # build:
    #   context: ./nginx      
    #   dockerfile: dockerfile
     
    restart: always
    volumes: 
      - './nginx/configs/:/etc/nginx/conf.d/'
      - './nginx/www:/var/www/html'    # si toutefois j'ai des statics files
      - './nginx/log:/var/log/nginx/'
    ports:
      - '8000:80'
    depends_on:
     - wsgi 
     - fluentd     
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: nginx
    networks:
      - biblio_net
            
  fluentd:
    image: fluent/fluentd:v1.11
    container_name: fluentd
    hostname: fluentd
    ports:
      - 24224:24224
      - 24224:24224/udp
    volumes:
      - ./fluentd/configs/fluent.conf:/fluentd/etc/fluent.conf
    command: '-c /fluentd/etc/fluentd.conf -v'    
    deploy:
      mode: global    
    networks:
      - biblio_net


  # jaeger:
  #   image: jaegertracing/all-in-one:latest
  #   container_name: jaeger
  #   hostname: jaeger
    
  #   environment:
  #     - JAEGER_AGENT_HOST= jaeger
  #     - SPAN_STORAGE_TYPE=grpc
  #     - LOG_LEVEL=info
  #   ports:
  #     - 5775:5775/udp 
  #     - 6831:6831/udp # UDP port for Jaeger agent
  #     - 6832:6832/udp 
  #     - 5778:5778 
  #     - 16686:16686  # Jaeger UI
  #     - 14268:14268  # HTTP port for spans
  #     - 14250:14250 
  #     - 9411:9411
  #     - 4317:4317 # OTLP receiver 
  #   networks:
  #     - biblio_net
  #   restart: on-failure
  
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    hostname: jaeger
    ports:
      - 6831:6831/udp
      - 16686:16686
    networks:
      - biblio_net

  otel-collector:
    container_name: collector
    hostname: collector
    image: otel/opentelemetry-collector:latest
    command: ['--config=/etc/otel-collector-config.yaml']
    volumes:
      - ./otel-collector/configs/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    depends_on:
      - jaeger
    networks:
      - biblio_net
    ports:
        - "4317:4317"  # OTLP gRPC for traces

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus  
    hostname: prometheus
    volumes:
      - ./etc/prometheus/prometheus.yaml:/etc/prometheus.yaml
      - prometheus_pyrra:/etc/prometheus/pyrra
    ports:
      - "9090:9090"
    networks:
      - biblio_net
    depends_on:
      - fluentd


  grafana:
    #image: grafana/grafana:latest   
    build:
      context: ./grafana
    container_name: grafana  
    hostname: grafana    
    restart: unless-stopped     
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
      - jaeger
      - fluentd
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - biblio_net
   
      
    

    
  # elasticsearch:
  #   profiles: [integrations,elasticsearch]
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
  #   environment:
  #     - node.name=elasticsearch
  #     - cluster.name=es-grafana-agent-cluster
  #     - discovery.type=single-node
  #   volumes:
  #     - elasticsearch_data:/usr/share/elasticsearch/data
  #   ports:
  #     - "9200:9200"
  # prometheus:
  #   image: prom/prometheus
  #   container_name: prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #   ports:
  #     - 9090:9090
  #   restart: unless-stopped
  #   volumes:
  #     - ./prometheus:/etc/prometheus
  #     - prom_data:/prometheus
  #   logging:
  #     driver: loki
  #     options:
  #       loki-url: 'http://localhost:3100/api/prom/push'
networks:
  biblio_net:
    name: biblio_net
    driver: bridge
       
   
volumes:
  mysql:
    name: mysql_volume
    driver: local 
  elasticsearch_data:
    driver: local
  prom_data:
   grafana_data::
    external: true 