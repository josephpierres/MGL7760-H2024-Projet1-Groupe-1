receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
        cors:      #j'ai vu des miseres `a cause de cela`
           allowed_origins: ['*'] # Autorise toutes les origines pour CORS, peut être modifié pour plus de sécurité

  filelog:
    include: ['/tmp/logs/system.log']
    operators:
    - type: regex_parser
      regex: "^(?P<timestamp>\\w{3} \\d{1,2} \\d{2}:\\d{2}:\\d{2}) (?P<message>.*)$"
  
  jaeger:
    protocols:
      grpc:
        endpoint: 0.0.0.0:14250
      thrift_http:
        endpoint: 0.0.0.0:14268/api/traces

  prometheus:
    config:
      scrape_configs:
        - job_name: 'otelcol'
          scrape_interval: 10s
          static_configs:
            - targets: ['0.0.0.0:8888']
 
  mysql:
    endpoint: "localhost:3306"
    collection_interval: 10s
    username: user
    password: user
    initial_delay: 10s

  nginx:
    endpoint: "http://localhost:8000/nginx_status"
  redis:
    endpoint: "localhost:6379"
    collection_interval: 10s
  docker_stats:
    endpoint: unix:///var/run/docker.sock


processors:
  batch:
  transform:
    error_mode: ignore
    trace_statements:
      - context: span

exporters:
  otlphttp:
    endpoint: "http://localhost:3100/loki/api/v1/push"
    labels:
      job: "otelcol"
  otlp:
    endpoint: "http://jaeger:4318"   # jaeger
    tls:
      insecure: true
  otlphttp/prometheus:
    endpoint: "http://localhost:9090/api/v1/otlp"
    tls:
      insecure: true 
    
  logging:
    loglevel: debug


extensions:
  health_check:
    endpoint: "0.0.0.0:13133"

service:
  extensions: [health_check]
  pipelines:
    traces:
      receivers: [otlp]
      processors: [transform, batch]
      exporters: [otlp, debug, logging]
    metrics:
      receivers: [otlp, prometheus, redis, mysql, nginx, docker_stats]
      processors: [batch]
      exporters: [otlphttp/prometheus, debug, logging]
    logs:
      receivers: [otlp, filelog]
      processors: [batch]
      exporters: [otlphttp]